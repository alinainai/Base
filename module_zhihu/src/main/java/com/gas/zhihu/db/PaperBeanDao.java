package com.gas.zhihu.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gas.zhihu.bean.PaperBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "paperbean".
*/
public class PaperBeanDao extends AbstractDao<PaperBean, Long> {

    public static final String TABLENAME = "paperbean";

    /**
     * Properties of entity PaperBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PathName = new Property(1, String.class, "pathName", false, "PATH_NAME");
        public final static Property MapKey = new Property(2, String.class, "mapKey", false, "MAP_KEY");
        public final static Property VoltageLevel = new Property(3, int.class, "voltageLevel", false, "VOLTAGE_LEVEL");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FILE_NAME");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property ExtraStr1 = new Property(6, String.class, "extraStr1", false, "EXTRA_STR1");
        public final static Property ExtraStr2 = new Property(7, String.class, "extraStr2", false, "EXTRA_STR2");
    }


    public PaperBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PaperBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"paperbean\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PATH_NAME\" TEXT," + // 1: pathName
                "\"MAP_KEY\" TEXT," + // 2: mapKey
                "\"VOLTAGE_LEVEL\" INTEGER NOT NULL ," + // 3: voltageLevel
                "\"FILE_NAME\" TEXT," + // 4: fileName
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"EXTRA_STR1\" TEXT," + // 6: extraStr1
                "\"EXTRA_STR2\" TEXT);"); // 7: extraStr2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"paperbean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pathName = entity.getPathName();
        if (pathName != null) {
            stmt.bindString(2, pathName);
        }
 
        String mapKey = entity.getMapKey();
        if (mapKey != null) {
            stmt.bindString(3, mapKey);
        }
        stmt.bindLong(4, entity.getVoltageLevel());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getType());
 
        String extraStr1 = entity.getExtraStr1();
        if (extraStr1 != null) {
            stmt.bindString(7, extraStr1);
        }
 
        String extraStr2 = entity.getExtraStr2();
        if (extraStr2 != null) {
            stmt.bindString(8, extraStr2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pathName = entity.getPathName();
        if (pathName != null) {
            stmt.bindString(2, pathName);
        }
 
        String mapKey = entity.getMapKey();
        if (mapKey != null) {
            stmt.bindString(3, mapKey);
        }
        stmt.bindLong(4, entity.getVoltageLevel());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getType());
 
        String extraStr1 = entity.getExtraStr1();
        if (extraStr1 != null) {
            stmt.bindString(7, extraStr1);
        }
 
        String extraStr2 = entity.getExtraStr2();
        if (extraStr2 != null) {
            stmt.bindString(8, extraStr2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaperBean readEntity(Cursor cursor, int offset) {
        PaperBean entity = new PaperBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pathName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mapKey
            cursor.getInt(offset + 3), // voltageLevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // extraStr1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // extraStr2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaperBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPathName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMapKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVoltageLevel(cursor.getInt(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setExtraStr1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExtraStr2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaperBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaperBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaperBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
