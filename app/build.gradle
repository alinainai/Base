apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.greenrobot.greendao' // apply plugin
apply plugin: 'kotlin-kapt'
kapt {
    generateStubs = true
}
def static releaseTime() {
    return new Date().format("MMddHHmm", TimeZone.getDefault())
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.gas.app"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        multiDexEnabled true
        ndk { abiFilters "armeabi", "x86" }

        //ARouter配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                //声明需要使用注解功能
                includeCompileClasspath true
            }
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //解决kotlin添加过程中出现的Error: Program type already present: org.intellij.lang.annotations.Identifier问题
    configurations {
        cleanedAnnotations
        compile.exclude group: 'org.jetbrains', module: 'annotations'
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
    sourceSets.main.jniLibs.srcDirs = ['libs']

    signingConfigs {

        debug {
            //用来解决打包时只选择v2，安装报错的问题
            v1SigningEnabled true
            v2SigningEnabled true
            storeFile file("../jks/bopai.keystore")
            storePassword "bp5963373"
            keyAlias "bopai.keysotre"
            keyPassword "bp5963373"
        }
        release {
            v1SigningEnabled true
            v2SigningEnabled true
            storeFile file("../jks/p2p.keystore")
            storeFile file("../jks/bopai.keystore")
            storePassword "bp5963373"
            keyAlias "bopai.keysotre"
            keyPassword "bp5963373"
        }
    }

    buildTypes {

        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            multiDexEnabled true
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            shrinkResources true
            multiDexEnabled true
            minifyEnabled true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith(".apk")) {
                        //这里修改apk文件名
                        def fileName = "credit_${defaultConfig.versionName}_${buildType.name}_${releaseTime()}.apk"
                        outputFileName = fileName
                    }
                }
            }
        }
    }

    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation rootProject.ext.dependencies["android-test-junit"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    testImplementation rootProject.ext.dependencies["junit"]


//    implementation 'com.github.chrisbanes.photoview:library:1.2.4'
    implementation 'com.zhy:okhttputils:2.6.2'
    //tools
    kapt rootProject.ext.dependencies["arouter-compiler"]
    kapt(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'annotations'
    }
    kapt rootProject.ext.dependencies["dagger2-compiler"]

    implementation rootProject.ext.dependencies["lottie"]

    //leak canary 2.0+
    debugImplementation rootProject.ext.dependencies["canary-debug"]


    if (!isBuildModule.toBoolean()) {
        //在宿主 App 中使用 implementation 依赖业务组件, 业务组件的代码就会完全暴露给宿主 App, 不利于代码的隔离
        //使用 runtimeOnly 依赖业务组件, 可实现业务组件的代码在编译时对宿主 App 不可见, 仅在运行时对宿主 App 可见
        runtimeOnly project(":module_zhihu")
        runtimeOnly project(":module_beauty")
        runtimeOnly project(":module_test")

    }
    implementation project(path: ':baseui')
    implementation project(path: ':componentservice')

}
